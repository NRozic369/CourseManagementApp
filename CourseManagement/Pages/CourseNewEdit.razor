@page "/course-edit"
@page "/course-edit/{id:int}"
@inject ICourseService CourseService
@inject NavigationManager NavigationManager

@if (Id == null)
{
    <h1>Create new course</h1>
}
else
{
    <h1>Edit @course.CourseTitle course</h1>
}

<EditForm Model="course" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="Title">Course title</label>
        <InputText id="Title" @bind-Value="course.CourseTitle" class="form-control"></InputText>
    </div>
      <div>
        <label for="Description">Course description</label>
        <InputTextArea id="Description" @bind-Value="course.CourseDescription" class="form-control"></InputTextArea>
    </div>
    <div>
        <label for="Date">Course date</label>
        <InputDate id="Date" @bind-Value="course.CourseStartDateTime" class="form-control"></InputDate>
        <InputDate id="Date" @bind-Value="course.CourseStartDateTime" Type="InputDateType.Time"></InputDate>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>

</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Course course = new Course();

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            course = await CourseService.GetCourseById((int)Id);
            btnText = "Save changes";
        }
        else
        {
            course.CourseStartDateTime = DateTime.Now;
            btnText = "Save";
        } 
    }

    private async Task HandleSubmit()
    {
        if (Id == null)
        {
            await CourseService.CreateCourse(course);
        }
        else
        {
            await CourseService.UpdateCourse((int)Id, course);
        }
        NavigationManager.NavigateTo("/");
    }
}

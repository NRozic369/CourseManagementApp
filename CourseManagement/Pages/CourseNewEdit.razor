@page "/course-edit"
@page "/course-edit/{id:int}"
@inject ICourseService CourseService
@inject IAttendeeService AttendeeService
@inject IToastService ToastService
@inject NavigationManager NavigationManager

@if (Id == null)
{
    <h1>Create new course</h1>
}
else
{
    <h1>Edit @course.CourseTitle course</h1>
}
<hr />

<EditForm Model="course" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="Title">Course title</label>
        <InputText id="Title" @bind-Value="course.CourseTitle" class="form-control"></InputText>
    </div>
    <div class="mb-3">
        <label for="Description">Course description</label>
        <InputTextArea id="Description" @bind-Value="course.CourseDescription" class="form-control"></InputTextArea>
    </div>
    <div class="mb-3">
        <label for="Teacher">Course teacher</label>
        <InputText id="Teacher" @bind-Value="course.CourseTeacher" class="form-control"></InputText>
    </div>
    <div class="mb-3">
        <label for="TeacherEmail">Course teacher email</label>
        <InputText id="TeacherEmail" @bind-Value="course.CourseTeacherEmail" class="form-control"></InputText>
    </div>
    <div class="row mb-3">
        <label for="Date">Course date</label>
        <div class="col-4">
            <InputDate id="Date" @bind-Value="course.CourseStartDateTime" class="form-control" Type="InputDateType.Date"></InputDate>
        </div>
        <div class="col-2">
            <InputDate id="Date" @bind-Value="course.CourseStartDateTime" class="form-control" Type="InputDateType.Time"></InputDate>
        </div>
    </div>
    <div class="mb-3">
        <label for="CourseCapacity">Course capacity</label>
        <InputNumber id="CourseCapacity" @bind-Value="course.MaxNumberOfAtendees" class="form-control"></InputNumber>
    </div>
    <div class="mb-3">
        @if (Id == null)
        {
            <label for="PIN">Course edit/delete PIN</label>
        }
        else
        {
            <label for="PIN">Confirm course edit/delete PIN</label>
        }
        <InputText id="PIN" type="password" @bind-Value="course.EditDeleteCoursePIN" class="form-control"></InputText>
    </div>
    <br />
    <button type="submit" class="btn btn-primary mb-5">@btnText</button>
</EditForm>

@if(Id != null) {
    <hr />
    <h3>Course attendees</h3>

    @if (course.CourseAttendees.Count > 0)
    {
        <table class="table mt-5">
            <thead>
                <tr>
                    <th>First name</th>
                    <th>Last name</th>
                    <th>Email</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var attendee in course.CourseAttendees)
                {
                    <tr>
                        <td>@attendee.FirstName</td>
                        <td>@attendee.LastName</td>
                        <td>@attendee.Email</td>
                        <td>
                            <button class="btn btn-primary" @onclick="(() => EditAttendee(attendee.Id))">
                                <i class="oi oi-pencil"></i>
                            </button>
                            <button class="btn btn-danger" @onclick="(() => DeleteAttendee(attendee.Id))">
                                <i class="oi oi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <span>There are no course attendees to display.</span>
    }
}

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    CourseNewEditModel course = new CourseNewEditModel();

    Attendee attendee = new Attendee();

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            course = await CourseService.GetCourseByIdForCreateEdit((int)Id);
            btnText = "Save changes";
        }
        else
        {
            course.CourseStartDateTime = DateTime.Now;
            btnText = "Save";
        } 
    }

    private async Task HandleSubmit()
    {
        if (Id == null)
        {
            await CourseService.CreateCourse(course);
            ToastService.ShowSuccess("Course was succesfully created!");
        }
        else
        {
            await CourseService.UpdateCourse((int)Id, course);
            ToastService.ShowSuccess("Course was succesfully updated!");
        }
        NavigationManager.NavigateTo("/");
    }

    private void EditAttendee(int Id)
    {
        NavigationManager.NavigateTo($"/attendee-edit/{Id}");
    }

    private async void DeleteAttendee(int AttendeeId)
    {
        await AttendeeService.DeleteAttendee(AttendeeId);
        ToastService.ShowSuccess("Attendee was succesfully deleted!");
        StateHasChanged();
    }
}

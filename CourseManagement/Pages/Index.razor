@page "/"
@inject ICourseService CourseService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<PageTitle>Index</PageTitle>

<div style="display: flex">
    <h1 style="margin: 0">
        Available courses
    </h1>
    <button class="btn btn-primary" @onclick="(() => CreateCourse())" style="margin-left: auto">
        Create new course
    </button>
</div>
<hr />

@if (courses == null)
{
    <span>Loading...</span>
}
else if (courses.Count > 0)
{
    <table class="table mt-5">
        <thead>
            <tr>
                <th>Course title</th>
                <th>Course teacher</th>
                <th>Course date</th>
                <th>Course capacity</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var course in courses)
            {
                <tr>
                    <td>@course.CourseTitle</td>
                    <td>@course.CourseTeacher</td>
                    <td>@course.CourseStartDateTime.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@course.CourseCapacity</td>
                    <td>
                        <button class="btn btn-info" @onclick="(() => ShowCourseDetails(course.Id))">
                            <i class="oi oi-magnifying-glass"></i>
                        </button>
                        <button class="btn btn-primary" @onclick="(() => EditCourse(course.Id))">
                            <i class="oi oi-pencil"></i>
                        </button>
                        <button class="btn btn-danger" @onclick="(() => DeleteCourseDialog(course.Id))">
                            <i class="oi oi-trash"></i>
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-success" disabled="@course.IsCapacityFull" @onclick="(() => JoinCourse(course.Id))">
                            <i class="oi oi-person"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        <div>
            <input type="button" class="btn-lg btn" id="prev" @onclick="PreviousPage" value="Previous" />

            @for(int i = CurPage - 2; i <= CurPage + 2; i++)
            {
                int j = i;
                if(i > 0)
                {
                    if (i == CurPage)
                    {
                        <span class="px-2" style="font-weight:bold;cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                    }
                    else
                    {
                        <span class="px-2" style="cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                    }
                }
            }

            <input type="button" class="btn-lg btn" id="next" @onclick="NextPage" value="Next" />
        </div>
    </table>
}
else
{
    <span>There are no courses to display.</span>
    <div>
        <input type="button" class="btn-lg btn" id="prev" @onclick="PreviousPage" value="Previous" />

        @for (int i = CurPage - 2; i <= CurPage + 2; i++)
        {
            int j = i;
            if (i > 0)
            {
                if (i == CurPage)
                {
                    <span class="px-2" style="font-weight:bold;cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                }
                else
                {
                    <span class="px-2" style="cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                }
            }
        }

        <input type="button" class="btn-lg btn" id="next" @onclick="NextPage" value="Next" />
    </div>
}

<PINConfirmationDialog @ref="child" OnClose="@PINConfirmationDialogClose"></PINConfirmationDialog>

@code
{

    const int PAGESIZE = 5;

    private int CurPage = 1;

    PINConfirmationDialog child;

    List<CoursesListModel>? courses = null;

    private async void PINConfirmationDialogClose(PINConfirmationModel result)
    {
        if (result.IsDialogOk)
        {
            if(result.InsertedPIN == null)
            {
                ToastService.ShowError("PIN was not inserted!");
            }
            else
            {
                if (await CourseService.CheckCoursePIN(result.CourseId, result.InsertedPIN))
                {
                    if(result.AfterDialogActionType == "edit")
                    {
                        NavigationManager.NavigateTo($"course-edit/{result.CourseId}");
                    }
                    else
                    {
                        await DeleteCourse(result.CourseId);
                        StateHasChanged();
                    }
                }
                else
                {
                    ToastService.ShowError("Incorrect PIN!");
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ShowPage();
    }

    protected async Task ShowPage()
    {
        var response = await CourseService.GetAllCourses(CurPage);
        if (response.IsSuccessful)
        {
            courses = response.Data;
        }
        else
        {
            ToastService.ShowError(response.Message);
        }
    }

    protected async Task ShowPage(int i)
    {
        CurPage = i;
        await ShowPage();
    }

    protected async Task NextPage()
    {
        CurPage++;
        await ShowPage();
    }

    protected async Task PreviousPage()
    {
        if(CurPage > 1)
        {
            CurPage--;
            await ShowPage();
        }
    }

    private void ShowCourseDetails(int id)
    {
        NavigationManager.NavigateTo($"course-details/{id}");
    }

    private void EditCourse(int id)
    {
        child.ShowPINConfirmationDialog("PIN required!", "PIN is required for ", id, "edit", null);
    }

    private void CreateCourse()
    {
        NavigationManager.NavigateTo("course-edit");
    }

    private void DeleteCourseDialog(int id)
    {
        child.ShowPINConfirmationDialog("PIN required!", "PIN is required for ", id, "delete", null);
    }

    private async Task DeleteCourse(int id)
    {
        var response = await CourseService.DeleteCourse(id);
        if (response.IsSuccessful)
        {
            ToastService.ShowSuccess(response.Message);
            var coursesResponse = await CourseService.GetAllCourses(CurPage);
            if (coursesResponse.IsSuccessful)
            {
                courses = coursesResponse.Data;
            }
            else
            {
                ToastService.ShowError(coursesResponse.Message);
            }
        }
        else
        {
            ToastService.ShowError(response.Message);
        }
    }

    private void JoinCourse(int id)
    {
        NavigationManager.NavigateTo($"course-join/{id}");
    }
}

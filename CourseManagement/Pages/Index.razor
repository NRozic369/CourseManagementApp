@page "/"
@inject ICourseService CourseService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<PageTitle>Index</PageTitle>

<div style="display: flex">
    <h1 style="margin: 0">
        Available courses
    </h1>
    <button class="btn btn-primary" @onclick="(() => CreateCourse())" style="margin-left: auto">
        Create new course
    </button>
</div>
<hr />

@if (courses == null)
{
    <span>Loading...</span>
}
else if (courses.Count > 0)
{
    <table class="table mt-5">
        <thead>
            <tr>
                <th>Course title</th>
                <th>Course teacher</th>
                <th>Course date</th>
                <th>Course capacity</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var course in courses)
            {
                <tr>
                    <td>@course.CourseTitle</td>
                    <td>@course.CourseTeacher</td>
                    <td>@course.CourseStartDateTime.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@course.CourseCapacity</td>
                    <td>
                        <button class="btn btn-info" @onclick="(() => ShowCourseDetails(course.Id))">
                            <i class="oi oi-magnifying-glass"></i>
                        </button>
                        <button class="btn btn-primary" @onclick="(() => EditCourse(course.Id))">
                            <i class="oi oi-pencil"></i>
                        </button>
                        <button class="btn btn-danger" @onclick="(() => DeleteCourse(course.Id))">
                            <i class="oi oi-trash"></i>
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-success" @onclick="(() => JoinCourse(course.Id))">
                            <i class="oi oi-person"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <span>There are no courses to display.</span>
}

@code
{
    List<CoursesListModel>? courses = null;

    protected override async Task OnInitializedAsync()
    {
        courses = await CourseService.GetAllCourses();
    }

    private void ShowCourseDetails(int id)
    {
        NavigationManager.NavigateTo($"course-details/{id}");
    }

    private void EditCourse(int id)
    {
        NavigationManager.NavigateTo($"course-edit/{id}");
    }

    private void CreateCourse()
    {
        NavigationManager.NavigateTo("course-edit");
    }

    private async Task DeleteCourse(int id)
    {
        await CourseService.DeleteCourse(id);
        ToastService.ShowSuccess("Course was succesfully deleted!");
        courses = await CourseService.GetAllCourses();
    }

    private void JoinCourse(int id)
    {
        NavigationManager.NavigateTo($"course-join/{id}");
    }
}
